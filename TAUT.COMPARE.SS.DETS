*-----------------------------------------------------------------------------
* <Rating>1001</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE TAUT.COMPARE.SS.DETS(STD.SEL.ID)
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_BATCH.FILES
    $INSERT I_F.STANDARD.SELECTION
    $INSERT I_F.TAUT.APPL.CHANGE
    $INSERT I_F.PGM.FILE
    $INSERT I_F.PGM.DATA.CONTROL
    $INSERT I_TAUT.COMPARE.SS.DETS.COMMON

    BEGIN CASE
    CASE CONTROL.LIST<1,1> EQ "OB.APPLICATION"
        GOSUB UPDATE.OB.APPLICATION
    CASE CONTROL.LIST<1,1> EQ "NEW.APPLICATION"
        GOSUB UPDATE.NEW.APPLICATION
    CASE CONTROL.LIST<1,1> EQ "MODIFIED.FIELDS"
        GOSUB UPDATE.FIELD.CHANGES
    END CASE

    RETURN

UPDATE.OB.APPLICATION:
**********************
    GOSUB CHECK.OB

    IF Y.PRODUCT EQ 'OB' OR OBJ.CODE NE 1 ELSE RETURN

    TAUT.APPL.CHANGE.ID = 'SYSTEM'
    R.TAUT.APPL.CHANGE = ''
    CALL F.READU(FN.TAUT.APPL.CHANGE,TAUT.APPL.CHANGE.ID,R.TAUT.APPL.CHANGE,F.TAUT.APPL.CHANGE,'','')
    IF R.TAUT.APPL.CHANGE<TAUT.APC.OB.APPLICATION> THEN
        R.TAUT.APPL.CHANGE<TAUT.APC.OB.APPLICATION,-1> = STD.SEL.ID
    END ELSE
        R.TAUT.APPL.CHANGE<TAUT.APC.OB.APPLICATION> = STD.SEL.ID
    END
    CRT "OB APPLICATION -> ":STD.SEL.ID

    CALL F.WRITE(FN.TAUT.APPL.CHANGE,TAUT.APPL.CHANGE.ID,R.TAUT.APPL.CHANGE)

    RETURN

CHECK.OB:
*********
    Y.PGM.CTRL.ID = "BP>":STD.SEL.ID
    R.PGM.DATA.CONTROL = ''
    CALL F.READ(FN.PGM.DATA.CONTROL, Y.PGM.CTRL.ID, R.PGM.DATA.CONTROL, F.PGM.DATA.CONTROL, Y.CONTROL.ERR)
    Y.PRODUCT = R.PGM.DATA.CONTROL<PDC.PRODUCT>

    OBJ.CODE=''
    VOC.ENTRY=''
    CALL CHECK.ROUTINE.EXIST(STD.SEL.ID,OBJ.CODE,VOC.ENTRY)


    RETURN
UPDATE.NEW.APPLICATION:
**************************
* To identify the New Application which has introduced in the Target Environment. This will be used for Comparison Report.
    TAUT.APPL.CHANGE.ID = 'SYSTEM'
    R.TAUT.APPL.CHANGE = ''
    CALL F.READU(FN.TAUT.APPL.CHANGE,TAUT.APPL.CHANGE.ID,R.TAUT.APPL.CHANGE,F.TAUT.APPL.CHANGE,'','')
    CALL F.READ(FN.SAVE.SS,STD.SEL.ID,R.TARGET.SS,F.SAVE.SS,LV.SS.ERR)
    IF LV.SS.ERR THEN         ;* Check whether the SS is exists in Source Environment . If didn't Exists then it is consider as New Application.
        IF R.TAUT.APPL.CHANGE<TAUT.APC.NEW.APPLICATION> THEN
            R.TAUT.APPL.CHANGE<TAUT.APC.NEW.APPLICATION,-1> = STD.SEL.ID
        END ELSE
            R.TAUT.APPL.CHANGE<TAUT.APC.NEW.APPLICATION> = STD.SEL.ID
        END
        CRT "NEW APPLICATION -->: ":STD.SEL.ID
    END

    IF R.TAUT.APPL.CHANGE THEN
        CALL F.WRITE(FN.TAUT.APPL.CHANGE,TAUT.APPL.CHANGE.ID,R.TAUT.APPL.CHANGE)
    END ELSE
        CALL F.RELEASE(FN.TAUT.APPL.CHANGE,TAUT.APPL.CHANGE.ID,F.TAUT.APPL.CHANGE)
    END

    RETURN


UPDATE.FIELD.CHANGES:
*********************
    GOSUB CHECK.OB

    IF Y.PRODUCT EQ 'OB' OR OBJ.CODE NE 1 THEN RETURN

    CALL F.READ(FN.PGM.FILE, STD.SEL.ID, R.PGM.FILE, F.PGM.FILE, Y.PF.ERR)
    Y.TYPE = R.PGM.FILE<EB.PGM.TYPE>
    IF (Y.TYPE EQ 'H' OR Y.TYPE EQ 'U' OR Y.TYPE EQ 'D') THEN
        CALL F.READ(FN.SAVE.SS,STD.SEL.ID,R.SOURCE.SS,F.SAVE.SS,LV.SS.ERR)
        IF R.SOURCE.SS THEN
            CALL GET.STANDARD.SELECTION.DETS(STD.SEL.ID,R.TARGET.SS)  ;* TO merge the Core & Local Ref fields Together .
            IF R.TARGET.SS THEN
                GOSUB UPDATE.TAUT.PARAM
            END
        END
    END
    RETURN

UPDATE.TAUT.PARAM:
******************
    TAUT.APPL.CHANGE.ID = STD.SEL.ID
    R.TAUT.APPL.CHANGE = ''
    TG.SS.NEW.FIELDS   = ''
    CALL F.READU(FN.TAUT.APPL.CHANGE,TAUT.APPL.CHANGE.ID,R.TAUT.APPL.CHANGE,F.TAUT.APPL.CHANGE,'','')
    CALL EB.GET.FIELD.DEFINITIONS(STD.SEL.ID,'LOAD')
    MANDATORY.FIELD.ARR = ''

    NO.OF.FIELDS = DCOUNT(R.TARGET.SS<SSL.SYS.FIELD.NAME>,@VM)

    FOR I =1 TO NO.OF.FIELDS
        IF R.TARGET.SS<SSL.SYS.FIELD.NO,I>[1,9] NE 'LOCAL.REF' AND NOT(NUM(R.TARGET.SS<SSL.SYS.FIELD.NO,I>)) THEN CONTINUE        ;* NO need Other than Local.ref AND Core fields.
*        IF R.TARGET.SS<SSL.SYS.FIELD.NAME,I> EQ 'LOCAL.REF' OR  NOT(R.TARGET.SS<SSL.SYS.FIELD.NO,I>)THEN CONTINUE

        LOCATE R.TARGET.SS<SSL.SYS.FIELD.NAME,I> IN R.SOURCE.SS<SSL.SYS.FIELD.NAME,1> SETTING VMPOS THEN
*20160916 - S

            IF R.TARGET.SS<SSL.SYS.TYPE,I> EQ "I" OR R.TARGET.SS<SSL.SYS.TYPE,I> EQ "J" ELSE

                IF R.TARGET.SS<SSL.SYS.VAL.PROG,I> NE R.SOURCE.SS<SSL.SYS.VAL.PROG,VMPOS> THEN
                    R.TAUT.APPL.CHANGE<TAUT.APC.MOD.SYS.VAL,-1>  = R.TARGET.SS<SSL.SYS.FIELD.NAME,I>
                END

                IF R.TARGET.SS<SSL.SYS.DISPLAY.FMT,I> NE R.SOURCE.SS<SSL.SYS.DISPLAY.FMT,VMPOS> THEN
                    R.TAUT.APPL.CHANGE<TAUT.APC.MOD.DISP.FMT,-1>  = R.TARGET.SS<SSL.SYS.FIELD.NAME,I>
                END

            END

*20160916 - E

            R.TARGET.SS<SSL.SYS.FIELD.NAME,I>  = ''
            R.TARGET.SS<SSL.SYS.FIELD.NO,I>    = ''
            R.TARGET.SS<SSL.SYS.CONVERSION,I>  = ''
            R.TARGET.SS<SSL.SYS.DISPLAY.FMT,I> = ''
            R.TARGET.SS<SSL.SYS.SINGLE.MULT,I> = ''
            R.TARGET.SS<SSL.SYS.LANG.FIELD,I>    = ''
            R.TARGET.SS<SSL.SYS.GENERATED,I>     = ''
            R.TARGET.SS<SSL.SYS.VAL.PROG,I>    = ''
            R.TARGET.SS<SSL.SYS.ALT.INDEX,I>   = ''
            R.TARGET.SS<SSL.SYS.CNV.TYPE,I>    = ''
            R.TARGET.SS<SSL.SYS.TYPE,I>         = ''
            R.TARGET.SS<SSL.SYS.IDX.FILE,I>     = ''
            R.TARGET.SS<SSL.SYS.INDEX.NULLS,I>   = ''
            R.TARGET.SS<SSL.SYS.REL.FILE,I>       = ''

            DEL R.SOURCE.SS<SSL.SYS.FIELD.NAME,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.FIELD.NO,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.CONVERSION,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.DISPLAY.FMT,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.SINGLE.MULT,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.LANG.FIELD,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.GENERATED,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.VAL.PROG,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.ALT.INDEX,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.CNV.TYPE,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.TYPE,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.IDX.FILE,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.INDEX.NULLS,VMPOS>
            DEL R.SOURCE.SS<SSL.SYS.REL.FILE,VMPOS>

        END ELSE
* To Identify the Mandatory & to identify the New Fields in Target - S/E

            IF INDEX(R.TARGET.SS<SSL.SYS.FIELD.NAME,I>,'RESERVE',1) THEN CONTINUE         ;* Reserve fields frequently included as new fields in Latest Environment.

            FLD.NO = R.TARGET.SS<SSL.SYS.FIELD.NO,I>
            APPL.FIELD.NAME = R.TARGET.SS<SSL.SYS.FIELD.NAME,I>
            MANDATORY.FIELD = FIELD(N(FLD.NO),'.',2)
            ACTUAL.NAME = F(FLD.NO)
            IF INDEX(ACTUAL.NAME,APPL.FIELD.NAME,1) ELSE CONTINUE     ;* We have two many similar Fields are created to handle ENQUIRIES

            IF MANDATORY.FIELD THEN
                R.TAUT.APPL.CHANGE<TAUT.APC.MANDATORY.FIELDS,-1> = APPL.FIELD.NAME
                R.TAUT.APPL.CHANGE<TAUT.APC.FIELD.NO,-1>   = I
                R.TAUT.APPL.CHANGE<TAUT.APC.USR.LINK.FIELD,-1>  = ''
                R.TAUT.APPL.CHANGE<TAUT.APC.USR.LINK.RTN,-1>  = ''
                R.TAUT.APPL.CHANGE<TAUT.APC.FIELD.VALUE,-1>  = ''
            END



*            IF R.TARGET.SS<SSL.SYS.FIELD.NO,I>[1,9] EQ 'LOCAL.REF' THEN
*                TG.SS.NEW.FIELDS := STD.SEL.ID : "*" :R.SOURCE.SS<SSL.SYS.FIELD.NAME,I> :'*': "LOCAL.REF-":FIELD(FIELD(R.SOURCE.SS<SSL.SYS.FIELD.NO,I>,',',2),'>',1) : @FM

*            END ELSE
*                TG.SS.NEW.FIELDS := STD.SEL.ID : "*" :R.SOURCE.SS<SSL.SYS.FIELD.NAME,I> :'*': R.SOURCE.SS<SSL.SYS.FIELD.NO,I> : @FM
*            END
            R.TAUT.APPL.CHANGE<TAUT.APC.NEW.FIELDS,-1> = APPL.FIELD.NAME
        END

* No need to update the No.Input field logic.
*        IF NO.INPUT.FIELD EQ 'NOINPUT' THEN
*                    R.TAUT.APPL.CHANGE<TAUT.APC.NO.INPUT.FIELDS,-1> = APPL.FIELD.NAME
*                END
*            END

    NEXT I

    SRC.SS.OB.FIELDS = ''
    NO.OF.FIELDS = DCOUNT(R.SOURCE.SS<SSL.SYS.FIELD.NAME>,@VM)
    FOR I=1 TO NO.OF.FIELDS
        IF R.SOURCE.SS<SSL.SYS.FIELD.NO,I>[1,9] NE 'LOCAL.REF' AND NOT(NUM(R.SOURCE.SS<SSL.SYS.FIELD.NO,I>)) THEN CONTINUE        ;* NO need Other than Local.ref AND Core fields.
        IF INDEX(R.SOURCE.SS<SSL.SYS.FIELD.NAME,I>,'RESERVE',1) THEN CONTINUE   ;* Reserve fields are modified to New field in Latest Environment.
* To identify the OB fields -S / E
*       IF R.SOURCE.SS<SSL.SYS.FIELD.NO,I>[1,9] EQ 'LOCAL.REF' THEN
*           SRC.SS.OB.FIELDS := STD.SEL.ID : "*" :R.SOURCE.SS<SSL.SYS.FIELD.NAME,I> :'*': "LOCAL.REF-":FIELD(FIELD(R.SOURCE.SS<SSL.SYS.FIELD.NO,I>,',',2),'>',1) : @FM
*       END ELSE
*           SRC.SS.OB.FIELDS := STD.SEL.ID : "*" R.SOURCE.SS<SSL.SYS.FIELD.NAME,I> :'*': R.SOURCE.SS<SSL.SYS.FIELD.NO,I> : @FM
*       END
        R.TAUT.APPL.CHANGE<TAUT.APC.OB.FIELDS,-1> = R.SOURCE.SS<SSL.SYS.FIELD.NAME,I>
    NEXT I

    IF R.TAUT.APPL.CHANGE THEN
        CRT "UPDATED APP MANDATORY/OB/NEW FIELDS -> ":TAUT.APPL.CHANGE.ID : " " : R.TAUT.APPL.CHANGE
        CALL F.WRITE(FN.TAUT.APPL.CHANGE,TAUT.APPL.CHANGE.ID,R.TAUT.APPL.CHANGE)
    END ELSE
        CALL F.RELEASE(FN.TAUT.APPL.CHANGE,TAUT.APPL.CHANGE.ID,F.TAUT.APPL.CHANGE)
    END

    RETURN

END



















